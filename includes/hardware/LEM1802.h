/* dcpu-16-emu - A simple DCPU-16 emulator written in C.
 * Copyright (C) 2016  Mrrraou
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

#include <stdint.h>
#include <stdbool.h>
#include <SDL2/SDL.h>

#include "interpreter.h"
#include "hardware.h"


typedef struct {
	// SDL runtime data
	SDL_Window	*window;
	SDL_Surface	*screenSurface;

	// Monitor data
	uint16_t	screen_map_address;
	uint16_t	font_map_address;
	uint16_t	palette_map_address;
	uint8_t		border_color_index;
	uint16_t	startup_time;
	uint16_t	blink;
	uint16_t	frameskip; // For performance
} LEM1802;


// Default palette, similar to the standard CGA/EGA/VGA 16-color palette
static const uint16_t LEM1802_default_palette[16] = {
	0x0000, 0x000A, 0x00A0, 0x00AA, 0x0A00, 0x0A0A, 0x0AA5, 0x0AAA,
	0x0555, 0x055F, 0x05F5, 0x05FF, 0x0F55, 0x0F5F, 0x0FF5, 0x0FFF
};

// Default font
static const uint16_t LEM1802_default_font[128 * 2] = {
	0x0000, 0x0000, 0x653E, 0x3E65, 0x3E5B, 0x5B3E, 0x1E7C, 0x1E00,
	0x1C7F, 0x1C00, 0x4C73, 0x4C00, 0x5C7F, 0x5C00, 0x183C, 0x1800,
  0xE7C3, 0xE7FF, 0x1824, 0x1800, 0xE7DB, 0xE7FF, 0xE7DB, 0xE7FF,
	0x2C72, 0x2C00, 0x607F, 0x0507, 0x607F, 0x617F, 0x2A1F, 0x7C2A,
  0x7F3E, 0x1C08, 0x081C, 0x3E7F, 0x227F, 0x7F22, 0x5F00, 0x5F00,
	0x0609, 0x7F7F, 0x9AA5, 0xA559, 0x6060, 0x6060, 0xA2FF, 0xFFA2,
  0x027F, 0x7F02, 0x207F, 0x7F20, 0x1818, 0x3C18, 0x183C, 0x1818,
	0x3020, 0x2020, 0x081C, 0x1C08, 0x707E, 0x7E70, 0x0E7E, 0x7E0E,
  0x0000, 0x0000, 0x005F, 0x0000, 0x0700, 0x0700, 0x3E14, 0x3E00,
	0x266B, 0x3200, 0x611C, 0x4300, 0x6659, 0xE690, 0x0005, 0x0300,
  0x1C22, 0x4100, 0x4122, 0x1C00, 0x2A1C, 0x2A00, 0x083E, 0x0800,
	0x00A0, 0x6000, 0x0808, 0x0800, 0x0060, 0x0000, 0x601C, 0x0300,
  0x3E4D, 0x3E00, 0x427F, 0x4000, 0x6259, 0x4600, 0x2249, 0x3600,
	0x0E08, 0x7F00, 0x2745, 0x3900, 0x3E49, 0x3200, 0x6119, 0x0700,
  0x3649, 0x3600, 0x2649, 0x3E00, 0x0066, 0x0000, 0x8066, 0x0000,
	0x0814, 0x2241, 0x1414, 0x1400, 0x4122, 0x1408, 0x0259, 0x0600,
  0x3E59, 0x5E00, 0x7E09, 0x7E00, 0x7F49, 0x3600, 0x3E41, 0x2200,
	0x7F41, 0x3E00, 0x7F49, 0x4100, 0x7F09, 0x0100, 0x3E49, 0x3A00,
  0x7F08, 0x7F00, 0x417F, 0x4100, 0x2040, 0x3F00, 0x7F0C, 0x7300,
	0x7F40, 0x4000, 0x7F0E, 0x7F00, 0x7E1C, 0x7F00, 0x7F41, 0x7F00,
  0x7F09, 0x0600, 0x3E41, 0xBE00, 0x7F09, 0x7600, 0x2649, 0x3200,
	0x017F, 0x0100, 0x7F40, 0x7F00, 0x1F60, 0x1F00, 0x7F30, 0x7F00,
  0x771C, 0x7700, 0x0778, 0x0700, 0x615D, 0x4300, 0x007F, 0x4100,
	0x0618, 0x6000, 0x0041, 0x7F00, 0x0C06, 0x0C00, 0x8080, 0x8080,
  0x0003, 0x0500, 0x2454, 0x7800, 0x7F44, 0x3800, 0x3844, 0x2800,
	0x3844, 0x7F00, 0x3854, 0x5800, 0x087E, 0x0900, 0x98A4, 0x7C00,
  0x7F04, 0x7800, 0x047D, 0x0000, 0x4080, 0x7D00, 0x7F10, 0x6C00,
	0x417F, 0x4000, 0x7C18, 0x7C00, 0x7C04, 0x7800, 0x3844, 0x3800,
  0xFC24, 0x1800, 0x1824, 0xFC80, 0x7C04, 0x0800, 0x4854, 0x2400,
	0x043E, 0x4400, 0x3C40, 0x7C00, 0x1C60, 0x1C00, 0x7C30, 0x7C00,
  0x6C10, 0x6C00, 0x9CA0, 0x7C00, 0x6454, 0x4C00, 0x0836, 0x4100,
	0x0077, 0x0000, 0x4136, 0x0800, 0x0201, 0x0201, 0x704C, 0x7000
};


Device* LEM1802_attach(InterpreterState *state);

uint32_t LEM1802_get_palette_color(Device *device, uint8_t index);
uint32_t LEM1802_get_font_character(Device *device, uint8_t character);

void LEM1802_render(Device *device);

void LEM1802_fire_interrupt(Device *device);
void LEM1802_tick(Device *device);
void LEM1802_destroy(Device *device);
